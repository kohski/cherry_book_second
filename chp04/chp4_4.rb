a = [1,2,3,4,5,6]

# 第二引数は長さ
a[1,3] # => [2, 3, 4]

# 複数添字指定
a.values_at(1, 4, 5) # => [2, 5, 6]

a = [1,2,3,4,5]

# [2,3,4] = 100にする。それぞれじゃない。
a[1,3] = 100
a # => [1, 100, 5]

b = [1,2,2,3,4,2,6]
# 引数と一致する値を削除
b.delete(2) # => 2
b.delete(100) # => nil
b # => [1, 3, 4, 6]

a = [1,2]
b = [2,3,4,5]
# 連結
a.concat(b) # => [1, 2, 2, 3, 4, 5]
# 元の配列はそのまま
a # => [1, 2, 2, 3, 4, 5]
b # => [2, 3, 4, 5]

# +も連結だけど、
a+b # => [1, 2, 2, 3, 4, 5, 2, 3, 4, 5]
# aは破壊的変更がされる。
a # => [1, 2, 2, 3, 4, 5]
b # => [2, 3, 4, 5]


# 集合演算
a = [1, 2, 3]
b = [3,4,5,6]
# 和集合
a | b # => [1, 2, 3, 4, 5, 6]
# 積集合
a & b # => [3]
# left outer join
a - b # => [1, 2]


# rest演算子的なの
e,f = 100,200
e # => 100
f # => 200

g, *h = 100, 200, 300
g # => 100
h # => [200, 300]

a = []
a.push(1)
a # => [1]


a = [1]
a.push(2,3)
a # => [1, 2, 3]

a = [1]
b = [2,3]
a.push(b)
a # => [1, [2, 3]]

a = [1]
b = [2,3]
a.push(*b)
a # => [1, 2, 3]

def hoge(a, b, *c)
  text = <<-TEXT # !> assigned but unused variable - text
    a: #{a}
    b: #{b}
    c: #{c}
  TEXT
end
# 引数が過分分は配列で受けてくれる
hoge(1,2,3,4,5) # => "    a: 1\n    b: 2\n    c: [3, 4, 5]\n"
